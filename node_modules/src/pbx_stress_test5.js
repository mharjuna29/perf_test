import http from 'k6/http';
import { sleep, check } from 'k6';
import { SharedArray } from 'k6/data';
import { Counter } from 'k6/metrics';
import { scenario } from 'k6/execution';

// --- Custom Metrics ---
const errorCounter = new Counter('errors');
let consecutiveFails = 0;

// --- Configurable Options ---
export const options = {
    stages: [
        { duration: '25', target: __ENV.VU_TARGET ? parseInt(__ENV.VU_TARGET) : 1000 }, // Bisa dikontrol via env
        // { duration: '15m', target: __ENV.VU_TARGET ? parseInt(__ENV.VU_TARGET) : 1000 },
        { duration: '5m', target: 0 },
    ],
    thresholds: {
        'http_req_failed': ['rate<0.02'], // Max error rate 2%
        'http_req_duration': ['p(95)<1500'], // 95% < 1.5s
    },
};

// --- Utilities ---
function adaptiveSleep(backoff) {
    sleep(backoff + Math.random() * 2);
}

function analyzeLoginError(res, userEmail) {
    let message = `❌ Login failed for ${userEmail} with status ${res.status}`;

    if (res.status === 0) {
        message += ' → No response or timeout.';
    } else if (res.status === 401) {
        message += ' → Unauthorized: Invalid credentials.';
    } else if (res.status === 403) {
        message += ' → Forbidden: User might be banned.';
    } else if (res.status === 429) {
        message += ' → Rate limited.';
    } else if (res.status >= 500) {
        message += ' → Server error.';
    }

    try {
        const json = res.json();
        if (json?.message) message += ` → Server message: ${json.message}`;
    } catch (_) {
        message += ' → Could not parse JSON.';
    }

    console.error(message);

}

function getWithAdaptiveRetry(url, headers = {}, maxRetries = 5) {
    let res;
    let backoff = 1;
    let attempt = 0;

    while (attempt < maxRetries) {
        res = http.get(url, { headers });
        recordEndpoint(url, res);

        if (res && res.status >= 200 && res.status < 400) {
            consecutiveFails = 0;
            return res;
        }

        attempt++;
        consecutiveFails++;
        errorCounter.add(1);

        if (res.status === 429) {
            backoff = Math.min(backoff * 2, 15);
            if (attempt === maxRetries) {
                console.warn('Surge detected: extra retries allowed');
                maxRetries += 3;
            }
        } else if (res.status >= 500 || res.status === 0) {
            backoff = Math.min(backoff * 1.5, 10);
        } else {
            break;
        }

        adaptiveSleep(backoff);

        if (consecutiveFails >= 5) {
            console.error('🚨 Too many failures. Auto-pause triggered.');
            
        }
    }
    return res;
}

function recordEndpoint(url, res) {
    if (!globalThis.endpointMetrics) {
        globalThis.endpointMetrics = {};
    }
    if (!globalThis.endpointMetrics[url]) {
        globalThis.endpointMetrics[url] = [];
    }
    globalThis.endpointMetrics[url].push(res.timings.duration);
}

// --- Login Helper ---
const users = new SharedArray('users', () => [
    { email: 'xyz@admin.com', password: 'admin#123' },
    // { email: 'backupuser@user.com', password: 'backup123' },
]);

function login(user, maxRetries = 3) {
    const loginUrl = 'https://mypbx.telkom.co.id/api/login';
    const payload = JSON.stringify({
        email: user.email,
        password: user.password,
        visitor_id: '243552f2e1c7629d66b0d3d4a78d7a2c',
    });

    const headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    };

    let res;
    for (let i = 0; i < maxRetries; i++) {
        res = http.post(loginUrl, payload, { headers });

        const success = check(res, {
            'Login 200 OK': (r) => r.status === 200,
            'Valid Token': (r) => {
                try {
                    const json = r.json();
                    return json && json.data && json.data.token;
                } catch (_) {
                    return false;
                }
            },
        });

        if (success) {
            console.log(`✅ Login success: ${user.email}`);
            return res.json().data.token;
        }

        console.warn(`Login failed for ${user.email}, retrying...`);

        analyzeLoginError(res, user.email);
        adaptiveSleep(2);
    }
    throw new Error(`Login failed for ${user.email}`);
}

export function setup() {
    const userIndex = Math.floor(Math.random() * users.length);
    const user = users[userIndex];
    const token = login(user);

    return { token };
}

// --- Main Execution ---
export default function (data) {
    const headers = {
        Authorization: `Bearer ${data.token}`,
        Accept: 'application/json',
    };

    const endpoints = [
        'https://mypbx.telkom.co.id/app/dashboard',
        'https://mypbx.telkom.co.id/api/show_news',
    ];

    endpoints.forEach(endpoint => {
        const res = getWithAdaptiveRetry(endpoint, headers);
        check(res, {
            'Endpoint loaded (200)': (r) => r.status === 200,
        });
    });

    autoScaleIfNeeded();

    sleep(1);
}

// --- Dynamic Scaling ---
function autoScaleIfNeeded() {
    const failRate = errorCounter.value / (scenario.iterationInTest + 1);

    if (failRate > 0.05) {
        console.warn('🔥 High failure rate detected: throttling down VUs...');
        scenario.setVUs(Math.max(scenario.vusActive * 0.5, 50)); // Turunkan 50%
        adaptiveSleep(5);
    } else if (failRate < 0.01 && scenario.vusActive < (parseInt(__ENV.VU_TARGET) || 1000)) {
        console.log('✅ Stable: ramping up VUs...');
        scenario.setVUs(scenario.vusActive + 50); // Naikkan 50 VU tiap healthy check
    }
}
