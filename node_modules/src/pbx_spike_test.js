import http from 'k6/http';
import { sleep, check } from 'k6';

export const options = {
    stages: [
        { duration: '2m', target: 2000 }, // simulate ramp-up of traffic from 1 to 2000 users over 2 minutes.
        { duration: '1m', target: 0 }, // ramp-down to 0 users gradually for 1 minute
    ],
};

function makeRequestWithRetry(url, method, body = null, headers = {}, maxRetries = 3) {
    let res;
    let backoff = 2;

    for (let i = 0; i < maxRetries; i++) {
        if (method === 'GET') {
            res = http.get(url, { headers });
        } else if (method === 'POST') {
            res = http.post(url, JSON.stringify(body), { headers });
        }

        if (res.status !== 429) {
            return res;
        }

        console.warn('Rate limit hit! Retrying after ' + backoff + 's');

        let jitter = Math.random() * 2;
        sleep(backoff + jitter);
        backoff *= 2;

    }

    return res;

}

export default function () {
    // let res = http.get('https://mypbx.telkom.co.id/user/login');
    // check(res, { "status is 200": (res) => res.status === 200 });
    sleep(1);
    

    const loginRequest = {
        email: 'xyz@admin.com',
        password: 'admin#123',
        visitor_id: '243552f2e1c7629d66b0d3d4a78d7a2c',
    }
    const headersLoginPage = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Content-Type': 'text/html; charset=utf-8',
    }

    const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
    };

    const loginPage = makeRequestWithRetry('https://mypbx.telkom.co.id/user/login', 'GET', null, headersLoginPage);
    check(loginPage, {
        'User Successfully Access Login Page (200)': (r) => r.status === 200,
    }) || console.log('User Successfully Access Login Page!');

    const loginResponse = makeRequestWithRetry('https://mypbx.telkom.co.id/api/login', 'POST', loginRequest, headers);
    check(loginResponse, {
        'Login Success (200)': (r) => r.status === 200,
    }) || console.error('Failed to Login! Received status code: ' + loginResponse.status_text);

    if (loginResponse.status !== 200) {
        return;
    }

    const loginBodyResponse = loginResponse.json();

    console.log('Login Success! Token: ' + loginBodyResponse.data.token);
}
